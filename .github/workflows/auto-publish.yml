name: "Auto Publish"

on:
  push:
    branches:
      - main
    paths:
      - "package.json"
  workflow_dispatch:
env:
  GH_TOKEN: ${{ secrets.ACCESS_TOKEN }} # allow electron-builder to publish a draft release
  CI: false

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        environment: [lmn]
        target: [ubuntu, windows, macos, macos-arm]
        include:
          - target: ubuntu
            os: ubuntu-latest
          - target: windows
            os: windows-latest
          - target: macos
            os: macos-latest
          - target: macos-arm
            os: macos-latest
    runs-on: ${{ matrix.os }}
    environment: ${{ matrix.environment }}
    env: # keep alphabetical order
      AUTO_ADJUST_CONTRACT_PRICE_TIMEOUT: ${{ vars.AUTO_ADJUST_CONTRACT_PRICE_TIMEOUT }}
      AUTO_ADJUST_PRICE_INTERVAL: ${{ vars.AUTO_ADJUST_PRICE_INTERVAL }}
      CHAIN_ID: ${{ vars.CHAIN_ID }}
      COIN_DEFAULT_GAS_LIMIT: ${{ vars.COIN_DEFAULT_GAS_LIMIT }}
      DEFAULT_GAS_PRICE: ${{ vars.DEFAULT_GAS_PRICE }}
      DISPLAY_NAME: ${{ vars.DISPLAY_NAME }}
      ETH_NODE_ADDRESS_HTTP: ${{ vars.ETH_NODE_ADDRESS_HTTP }}
      EXPLORER_API_URLS: ${{ vars.EXPLORER_API_URLS }}
      EXPLORER_URL: ${{ vars.EXPLORER_URL }}
      FAUCET_URL: ${{ vars.FAUCET_URL }}
      LMR_DEFAULT_GAS_LIMIT: ${{ vars.LMR_DEFAULT_GAS_LIMIT }}
      MAX_GAS_PRICE: ${{ vars.MAX_GAS_PRICE }}
      PORT_CHECK_ERROR_LINK: ${{ vars.PORT_CHECK_ERROR_LINK }}
      PORT_CHECKER_URL: ${{ vars.PORT_CHECKER_URL }}
      RECAPTCHA_SITE_KEY: ${{ secrets.RECAPTCHA_SITE_KEY }}
      SELLER_WHITELIST_URL: ${{ vars.SELLER_WHITELIST_URL }}
      SHOW_FAUCET: ${{ vars.SHOW_FAUCET }}
      SYMBOL_ETH: ${{ vars.SYMBOL_ETH }}
      SYMBOL_LMR: ${{ vars.SYMBOL_LMR }}
      TITAN_LIGHTNING_DASHBOARD: ${{ vars.TITAN_LIGHTNING_DASHBOARD }}
      TITAN_LIGHTNING_POOL: ${{ vars.TITAN_LIGHTNING_POOL }}

      HASHRATE_ERROR_THRESHOLD: ${{vars.HASHRATE_ERROR_THRESHOLD}}
      HASHRATE_CYCLE_DURATION: ${{vars.HASHRATE_CYCLE_DURATION}}
      HASHRATE_SHARE_TIMEOUT: ${{vars.HASHRATE_SHARE_TIMEOUT}}
      HASHRATE_VALIDATION_START_TIMEOUT: ${{vars.HASHRATE_VALIDATION_START_TIMEOUT}}
      HASHRATE_VALIDATION_GRACE_DURATION: ${{vars.HASHRATE_VALIDATION_GRACE_DURATION}}
      
      LOG_LEVEL_APP: ${{vars.LOG_LEVEL_APP}}
      LOG_LEVEL_SCHEDULER: ${{vars.LOG_LEVEL_SCHEDULER}}
      LOG_LEVEL_PROXY: ${{vars.LOG_LEVEL_PROXY}}
      LOG_LEVEL_CONNECTION: ${{vars.LOG_LEVEL_CONNECTION}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install packages
        run: npm install
      - name: Post install
        if: matrix.target == 'macos-arm'
        run: npm run postinstallMacDist
      - name: Set env from github 
        # keep alphabetical order
        run: | 
          echo "AUTO_ADJUST_CONTRACT_PRICE_TIMEOUT=$AUTO_ADJUST_CONTRACT_PRICE_TIMEOUT" >> .env
          echo "AUTO_ADJUST_PRICE_INTERVAL=$AUTO_ADJUST_PRICE_INTERVAL" >> .env
          echo "CHAIN_ID=$CHAIN_ID" >> .env
          echo "COIN_DEFAULT_GAS_LIMIT=$COIN_DEFAULT_GAS_LIMIT" >> .env
          echo "DEFAULT_GAS_PRICE=$DEFAULT_GAS_PRICE" >> .env
          echo "DEV_TOOLS=true" >> .env
          echo "DISPLAY_NAME=$DISPLAY_NAME" >> .env
          echo "ETH_NODE_ADDRESS_HTTP=$ETH_NODE_ADDRESS_HTTP" >> .env
          echo "EXPLORER_API_URLS=$EXPLORER_API_URLS" >> .env
          echo "EXPLORER_URL=$EXPLORER_URL" >> .env
          echo "FAUCET_URL=$FAUCET_URL" >> .env
          echo "LMR_DEFAULT_GAS_LIMIT=$LMR_DEFAULT_GAS_LIMIT" >> .env
          echo "MAX_GAS_PRICE=$MAX_GAS_PRICE" >> .env
          echo "NODE_ENV=production" >> .env
          echo "PORT_CHECK_ERROR_LINK=$PORT_CHECK_ERROR_LINK" >> .env
          echo "PORT_CHECKER_URL=$PORT_CHECKER_URL" >> .env
          echo "PROXY_ROUTER_URL=$PROXY_ROUTER_URL" >> .env
          echo "RECAPTCHA_SITE_KEY=$RECAPTCHA_SITE_KEY" >> .env
          echo "REQUIRED_PASSWORD_ENTROPY=$REQUIRED_PASSWORD_ENTROPY" >> .env
          echo "SELLER_WHITELIST_URL=$SELLER_WHITELIST_URL" >> .env
          echo "SHOW_FAUCET=$SHOW_FAUCET" >> .env
          echo "SYMBOL_ETH=$SYMBOL_ETH" >> .env
          echo "SYMBOL_LMR=$SYMBOL_LMR" >> .env
          echo "SYMBOL=$SYMBOL" >> .env
          echo "TITAN_LIGHTNING_DASHBOARD=$TITAN_LIGHTNING_DASHBOARD" >> .env
          echo "TITAN_LIGHTNING_POOL=$TITAN_LIGHTNING_POOL" >> .env
        shell: bash
      - name: Set env from gitlab
        run: |
          variables=("LUMERIN_TOKEN_ADDRESS" "CLONE_FACTORY_ADDRESS" "WALLET_ETH_NODE_ADDRESS" "PROXY_ROUTER_URL")
          gitlabVars=$(curl --header "PRIVATE-TOKEN: ${{ secrets.GITLAB_GROUP_TOKEN }}" "https://gitlab.com/api/v4/groups/${{ secrets.GITLAB_GROUP_ID }}/variables?per_page=1000")
          echo $gitlabVars | jq -c '.[]' | 
            while IFS= read -r line; do
              key=$(<<<"$line" jq -r .key);
              if [[ " ${variables[*]} " =~ " ${key} " ]]; then
                scope=$(<<<"$line" jq -r .environment_scope);
                value=$(<<<"$line" jq -r .value);
                if [ "${scope}" = '*' ]
                then
                  if [ "${key}" = 'WALLET_ETH_NODE_ADDRESS' ]; then
                    echo "ETH_NODE_ADDRESS=$value"  >> .env
                  else
                    echo "$key=$value" >> .env
                  fi
                fi
              fi
            done
          echo $gitlabVars | jq -c '.[]' | 
            while IFS= read -r line; do
              key=$(<<<"$line" jq -r .key);
              if [[ " ${variables[*]} " =~ " ${key} " ]]; then
                scope=$(<<<"$line" jq -r .environment_scope);
                value=$(<<<"$line" jq -r .value);
                if [ "${scope}" = "${{ matrix.environment }}" ]
                then
                  if [ "${key}" = 'WALLET_ETH_NODE_ADDRESS' ]; then
                    echo "ETH_NODE_ADDRESS=$value"  >> .env
                  else
                    echo "$key=$value" >> .env
                  fi
                fi
              fi
            done
            cat .env
        shell: bash
      - name: Fetch latest Proxy Router
        run: |
          if [ "${{ matrix.target }}" = "ubuntu" ]
          then
            namePrefix="Linux_x86_64"
          elif [ "${{ matrix.target }}" = "windows" ]
          then
            namePrefix="Windows_x86_64"
          elif [ "${{ matrix.target }}" = "macos-arm" ]
          then
            namePrefix="Darwin_arm64"
          elif [ "${{ matrix.target }}" = "macos" ]
          then
            namePrefix="Darwin_x86_64"
          fi
          curl --fail --retry 5 --retry-all-errors -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/Lumerin-protocol/proxy-router/releases/latest | jq -c '.assets[]' |
            while IFS= read -r line; do
              name=$(<<<"$line" jq -r .name);
              if grep -q "$namePrefix" <<< "$name"
              then
                downloadUrl="$(<<<"$line" jq -r .browser_download_url)";
                echo "Proxyrouter URL: $downloadUrl"
                if [ "${namePrefix}" = 'Windows_x86_64' ]; then
                  curl -o "$GITHUB_WORKSPACE/executables/proxy-router.exe" $downloadUrl -L
                else
                  curl -o "$GITHUB_WORKSPACE/executables/proxy-router" $downloadUrl -L
                fi
              fi
            done
        shell: bash
      - name: Build Web
        run: npm run web-build
      - name: Publish Mac
        if: matrix.target == 'macos'
        run: npm run publish -- -m
      - name: Publish Mac arm
        if: matrix.target == 'macos-arm'
        run: npm run publish -- -m --arm64
      - name: Publish Linux
        if: matrix.target == 'ubuntu'
        run: npm run publish -- -l
      - name: Publish Windows
        if: matrix.target == 'windows'
        run: npm run publish -- -w
